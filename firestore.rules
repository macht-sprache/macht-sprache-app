rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isCreator() {
      let creator = request.resource.data.creator;
      return creator.keys().hasOnly(['id', 'displayName']) &&
        request.auth.uid == creator.id &&
        creator.displayName == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.displayName;
    }

    function isValidatedUser() {
      return request.auth != null && request.auth.token.email_verified;
    }

    match /{document=**} {
      allow read, write: if false;
    }

    function isUser(user) {
      return request.auth.uid == user;
    }

    function isValidUser() {
      let data = request.resource.data;
      return data.keys().hasOnly(['displayName', 'lang']) &&
        data.displayName is string &&
        data.lang is string;
    }

    match /users/{user} {
      allow read: if isUser(user);
      allow create: if isValidatedUser() && isUser(user) && isValidUser();
      allow update: if isValidatedUser() && isUser(user) && isValidUser();
    }

    function isValidTerm() {
      let data = request.resource.data;
      return data.keys().hasOnly(['creator', 'createdAt', 'value', 'variants', 'lang', 'relatedTerms', 'commentCount']) &&
        data.createdAt == request.time &&
        data.value is string &&
        data.variants is list &&
        data.lang is string &&
        data.relatedTerms is list &&
        data.commentCount == 0;
    }

    match /terms/{term} {
      allow read: if true;
      allow create: if isValidatedUser() && isCreator() && isValidTerm();
    }

    match /translations/{translation} {
      allow read: if true;
    }

    match /translationExamples/{translationExample} {
      allow read: if true;
    }

    function isValidComment() {
      let data = request.resource.data;
      return data.keys().hasOnly(['creator', 'ref', 'createdAt', 'comment']) &&
        data.ref is path &&
        data.createdAt == request.time &&
        data.comment is string;
    }

    match /comments/{comment} {
      allow read: if true;
      allow create: if isValidatedUser() && isCreator() && isValidComment();
    }
  }
}

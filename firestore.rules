rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isEmbeddedUser(embeddedUser) {
      return embeddedUser.keys().hasOnly(['id', 'displayName']) &&
        request.auth.uid == embeddedUser.id &&
        embeddedUser.displayName == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.displayName;
    }

    function isCreator() {
      return isEmbeddedUser(request.resource.data.creator);
    }

    function isEditor() {
      let edited = request.resource.data.edited;
      return edited != null &&
        edited.at == request.time &&
        isEmbeddedUser(edited.by);
    }

    function isValidatedUser() {
      return request.auth != null &&
        request.auth.token.email_verified &&
          get(/databases/$(database)/documents/userProperties/$(request.auth.uid)).data.enabled;
    }

    function isAdmin() {
      return request.auth != null &&
        get(/databases/$(database)/documents/userProperties/$(request.auth.uid)).data.admin;
    }

    match /{document=**} {
      allow read, write: if false;
    }

    function isUser(user) {
      return request.auth.uid == user;
    }

    match /users/{user} {
      allow get: if true;
      allow list: if isAdmin();
      allow update: if isValidatedUser() && isUser(user) && isValidUserUpdate();

      function isValidUserUpdate() {
        let data = request.resource.data;
        return data.diff(resource.data).affectedKeys().hasOnly(['externalProfiles', 'bio']) &&
          data.externalProfiles.instagram is string &&
          data.externalProfiles.twitter is string &&
          data.externalProfiles.website is string;
      }

      match /notifications/{notificationId} {
        allow read: if isUser(user);
        allow update: if isValidatedUser() && isUser(user) && isValidNotificationUpdate();

        function isValidNotificationUpdate() {
          let data = request.resource.data;
          return data.diff(resource.data).affectedKeys().hasOnly(['seenAt', 'readAt']) &&
            (data.seenAt == null || data.seenAt is timestamp) &&
            (data.readAt == null || data.readAt is timestamp);
        }
      }
    }

    function isValidUserSettings() {
      let data = request.resource.data;
      return data.keys().hasOnly(['lang', 'showRedacted', 'newsletter']) &&
        data.lang is string &&
        data.showRedacted is bool &&
        data.newsletter is bool;
    }

    match /userSettings/{user} {
      allow get: if isUser(user) || isAdmin();
      allow list: if isAdmin();
      allow create, update: if isValidatedUser() && isUser(user) && isValidUserSettings();
    }

    match /userProperties/{user} {
      allow get: if isUser(user) || isAdmin();
      allow list: if isAdmin();
      allow create, update: if isAdmin();
    }

    function isValidTerm() {
      let data = request.resource.data;
      return data.keys().hasOnly(['creator', 'createdAt',  'adminComment', 'value', 'variants', 'lang', 'relatedTerms', 'commentCount', 'adminTags']) &&
        data.createdAt == request.time &&
        data.adminComment.langA == '' &&
        data.adminComment.langB == '' &&
        data.value is string &&
        data.variants is list &&
        data.lang is string &&
        data.relatedTerms is list &&
        data.commentCount == 0 &&
        data.adminTags.hideFromList == false &&
        data.adminTags.showInSidebar == false &&
        data.adminTags.hightlightLandingPage == false &&
        data.adminTags.disableExamples == false &&
        data.adminTags.enableCommentsOnTranslations == false &&
        data.adminTags.translationsAsVariants == false;
    }

    function isValidTermUpdate() {
      let data = request.resource.data;
      return data.diff(resource.data).affectedKeys().hasOnly(['value', 'lang']) &&
        data.value is string &&
        data.lang is string;
    }

    function isValidTermUpdateAdmin() {
      let data = request.resource.data;
      return data.diff(resource.data).affectedKeys().hasOnly(['value', 'lang', 'adminComment', 'adminTags']) &&
        data.value is string &&
        data.lang is string &&
        data.adminTags is map;
    }

    match /terms/{term} {
      allow read: if true;
      allow create: if isValidatedUser() && isCreator() && isValidTerm();
      allow update: if isValidatedUser() &&
        ((isAdmin() && isValidTermUpdateAdmin()) || (isCreator() && isValidTermUpdate()));
      allow delete: if isValidatedUser() && isAdmin();

      match /subscriptions/{user} {
        allow read: if isUser(user);
        allow create: if isValidatedUser() && isUser(user) && isCreator() && isValidSubscription();
        allow update: if isValidatedUser() && isUser(user) && isCreator() && isValidSubscriptionUpdate();

        function isValidSubscription() {
          let data = request.resource.data;
          return data.keys().hasOnly(['creator', 'createdAt',  'updatedAt', 'active']) &&
            data.createdAt == request.time &&
            data.updatedAt == null &&
            data.active is bool;
        }

        function isValidSubscriptionUpdate() {
          let data = request.resource.data;
          return data.diff(resource.data).affectedKeys().hasOnly(['updatedAt', 'active']) &&
            data.updatedAt == request.time &&
            data.active is bool;
        }
      }
    }

    function isValidTranslation() {
      let data = request.resource.data;
      return data.keys().hasOnly(['term', 'creator', 'createdAt', 'value', 'variants', 'lang', 'relatedTerms', 'commentCount', 'ratings']) &&
        data.term is path &&
        data.createdAt == request.time &&
        data.value is string &&
        data.variants is list &&
        data.lang is string &&
        data.commentCount == 0 &&
        data.ratings == null;
    }

    function isValidTranslationUpdate() {
      let data = request.resource.data;
      return data.diff(resource.data).affectedKeys().hasOnly(['value']) &&
        data.value is string;
    }

    match /translations/{translation} {
      allow read: if true;
      allow create: if isValidatedUser() && isCreator() && isValidTranslation();
      allow update: if isValidatedUser() && (isCreator() || isAdmin()) && isValidTranslationUpdate();
      allow delete: if isValidatedUser() && isAdmin();

      function isValidRating() {
        let data = request.resource.data;
        return data.keys().hasOnly(['rating', 'updatedAt']) &&
          data.rating is number &&
          data.rating >= 0 &&
          data.rating <= 1 &&
          data.updatedAt == request.time;
      }

      match /ratings/{userId} {
        allow read: if isUser(userId);
        allow create, update: if isValidatedUser() && isUser(userId) && isValidRating();
        allow delete: if isValidatedUser() && isUser(userId);
      }
    }

    match /translationExamples/{translationExample} {
      allow read: if true;
      allow delete: if isValidatedUser() && isAdmin();
    }

    match /sources/{book} {
      allow read: if true;
    }

    function isValidComment() {
      let data = request.resource.data;
      return data.keys().hasOnly(['creator', 'ref', 'createdAt', 'edited', 'comment', 'likeCount']) &&
        data.ref is path &&
        data.createdAt == request.time &&
        data.edited == null &&
        data.comment is string &&
        data.likeCount == 0;
    }

    function isValidCommentUpdate() {
      let data = request.resource.data;
      return data.diff(resource.data).affectedKeys().hasOnly(['comment', 'edited']) &&
        data.comment is string &&
        isEditor();
    }

    match /comments/{comment} {
      allow read: if true;
      allow create: if isValidatedUser() &&
        isCreator() &&
        isValidComment();
      allow update: if isValidatedUser() &&
        (isCreator() || isAdmin()) &&
        isValidCommentUpdate();
      allow delete: if isValidatedUser() &&
        isAdmin();

      function isValidLike() {
        let data = request.resource.data;
        return data.keys().hasOnly(['creator', 'createdAt']) &&
          data.createdAt == request.time;
      }

      match /likes/{userId} {
        allow read: if true;
        allow create: if isValidatedUser() && isUser(userId) && isCreator() && isValidLike();
        allow delete: if isValidatedUser() && isUser(userId);
      }
    }

    match /sensitiveTerms/global {
      allow read: if true;
    }

    match /settings/global {
      allow read, write: if isValidatedUser() && isAdmin();
    }
  }
}
